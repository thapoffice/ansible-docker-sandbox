- name: Generate a unique ID
  set_fact:
    new_id: "{{ lookup('pipe', 'uuidgen') }}"

- name: Set internal cert name
  set_fact:
    int_ssl_cert_name: "{{ cluster_svm_name }}-cert-{{ new_id }}"

- name: Generate private key
  community.crypto.openssl_privatekey:
    path: "/tmp/{{ int_ssl_cert_name }}.key"
    size: 2048
    type: RSA
  register: private_key

- name: For the sake of
  command: cat /tmp/{{ int_ssl_cert_name}}.key

- name: Create Certificate Signing Request (CSR)
  community.crypto.openssl_csr:
    path: "/tmp/{{ int_ssl_cert_name }}.csr"
    privatekey_path: "/tmp/{{ int_ssl_cert_name }}.key"
    common_name: "{{ common_name }}"
    subject_alt_name:
      - "DNS:{{ common_name }}"
      - "DNS:cluster1"
      - "DNS:localhost"
      - "IP:192.168.0.101"
    digest: "sha256"
  register: csr

- name: Create self-signed certificate
  community.crypto.x509_certificate:
    path: "/tmp/{{ int_ssl_cert_name }}.crt"
    csr_path: "/tmp/{{ int_ssl_cert_name }}.csr"
    privatekey_path: "/tmp/{{ int_ssl_cert_name }}.key"
    provider: "selfsigned"
    state: "present"
    force: false
    ignore_timestamps: true
    select_crypto_backend: "auto"
  register: ssl_certificate

- name: Print for the sake of
  command: cat /tmp/{{ int_ssl_cert_name }}.crt

- name: Another sake of
  command: cat /tmp/{{ int_ssl_cert_name }}.csr

- name: Get serial number
  set_fact:
    new_cert_serial: "{{ (ssl_certificate.serial_number | string | upper ) [:40] }}"
    ca_issuer: "{{ ssl_certificate.diff.after.issuer.commonName }}"
#
#- name: Install certificate on NetApp
#  netapp.ontap.na_ontap_security_certificates:
#    common_name: "{{ common_name }}"
#    name: "{{ common_name }}_{{ new_cert_serial }}"
#    public_certificate: "{{ lookup('file', ssl_certificate.filename) }}"
#    private_key: "{{ lookup('file', ssl_certificate.privatekey) }}"
#    intermediate_certificates: []
#    type: server
#    # svm: "{{ cluster_svm_name }}"
#    hostname: "{{hostname}}"
#    username: "{{username}}"
#    password: "{{password}}"
#    https: true
#    validate_certs: false
#  delegate_to: localhost
#
- name: GET CERTIFICATION INFORMATION
  netapp.ontap.na_ontap_rest_info:
    hostname: "{{hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    gather_subset:
      - security/certificates
    https: true
    validate_certs: false
  register: cert_info

- name: Debug cert_info
  debug:
    var: cert_info

- name: Ontap rest-cli module for the first time
  netapp.ontap.na_ontap_rest_cli:
    hostname: "{{hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    verb: 'GET'
    command: 'security/certificates'
    #params: 
    #  vserver: cluster1
    #  common-name: cluste1.demo.netapp.com
    https: true
    validate_certs: false
  register: cli_out

#### Extract the currently used serial
#- name: Extract SSL config
#  netapp.ontap.na_ontap_command:
#    command: ['ssl show -vserver {{ cluster_svm_name }} -fields serial']
#    privilege: 'advanced'
#    hostname: "{{ hostname }}"
#    username: "{{ username }}"
#    password: "{{ password }}"
#    https: true
#    validate_certs: no
#  delegate_to: localhost
#  register: command_output
#
## Extract entries from returned xml
#- name: Extract entries from returned xml
#  xml:
#    xmlstring: "{{command_output['msg']}}"
#    xpath: /x:results/x:cli-output
#    content: text
#    namespaces:
#      x: http://www.netapp.com/filer/admin
#  register: command_output_parsed
#  delegate_to: localhost  
#
#- name: debug output
#  debug:
#    var: command_output_parsed
#    verbosity: 1
#
#- name: Store the serial number of the currently used cert
#  set_fact:
#    used_serial: "{{command_output_parsed.matches[0]['{http://www.netapp.com/filer/admin}cli-output'].split('\n')[4].split(' ')[1]}}"
#
#- name: Debug serial
#  debug:
#    var: used_serial
#    verbosity: 1
#
#- name: Modify SSL Security Config to set supported protocols and ciphers
#  netapp.ontap.na_ontap_security_config:
#    name: ssl
#    is_fips_enabled: "{{ fips_enabled }}"
#    supported_ciphers:  "{{ supported_ciphers }}"
#    supported_protocols: "{{ supported_protocols }}"
#    hostname: "{{ hostname }}"
#    username: "{{ username }}"
#    password: "{{ password }}"
#    https: true
#    validate_certs: false
#  delegate_to: localhost
#  when: apply_strong_crypto
#
#- name: Modify SSL config to use the new certificate
#  netapp.ontap.na_ontap_command:
#    command: ['security ssl modify -server-enabled true -vserver {{ cluster_svm_name }} -serial {{ new_cert_serial }} -ca {{ ca_issuer }}']
#    privilege: 'advanced'
#    hostname: "{{ hostname }}"
#    username: "{{ username }}"
#    password: "{{ password }}"
#    https: true
#    validate_certs: no
#  environment:
#    no_proxy: "{{ lookup('env','no_proxy') + ',' + hostname }}"
#  delegate_to: localhost
#
#- name: Delete old certificate
#  netapp.ontap.na_ontap_command:
#    command: ['security certificate delete -vserver {{ cluster_svm_name }} -serial {{ used_serial }} -ca *']
#    privilege: 'advanced'
#    hostname: "{{ hostname }}"
#    username: "{{ username }}"
#    password: "{{ password }}"
#    https: true
#    validate_certs: no
#  environment:
#    no_proxy: "{{ lookup('env','no_proxy') + ',' + hostname }}"
#  delegate_to: localhost
#
#- name: Get TLS settings from an nmap scan
#  shell: nmap --script ssl-enum-ciphers -p 443 {{ ansible_host }}
#  register: nmap_output
#
#- name: Output TLS settings
#  debug:
#    var: nmap_output['stdout_lines']
#